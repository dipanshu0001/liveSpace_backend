const TourModel = require('../Models/Tour')
const ListingModel = require('../Models/Listing')
const AgentImageModel = require('../Models/AgentDetails')

const ScheduleTour = (req, res) => {
    const { Name, Email, Phone, S_Date, Comment, Listing_id, User_uid, Agent_uid } = req.body;
    console.log(req.body);
    if (!Name || !Email || !Phone || !S_Date || !Listing_id || !Agent_uid || !User_uid) {
        console.log(req.body)
        return res.json({ message: "Fill all Fields", iserror: 2 })
    }
    // const dateData = S_Date.split('-');
    // const year = dateData[0];
    // const month = dateData[1] - 1;
    // const date = dateData[2];
    // console.log(date,month,year);
    // const myDate = new Date(year, month, date);
    // console.log(myDate)
    const new_tour = new TourModel({
        Name,
        Email,
        Phone,
        S_Date,
        Comment,
        Listing_id,
        User_uid,
        Agent_uid,
    })
    new_tour.save()
        .then(() => {
            return res.status(200).json({ message: "Tour Scheduled Successfully", iserror: 1 });
        })
        .catch((err) => {
            console.log(err);
            // console.log()
            return res.status(500).json({ message: "Failed to Schedule Tour Please Try again", istour: 2 });
        });
}

const GetToursUser = async (req, res) => {
    try {
        const { uid } = req.body;
        // console.log(req.body);
        const result = await TourModel.find({ User_uid: uid });
        if (result.length === 0) {
            throw new ERROR("No Tour Sechduled")
        }
        // console.log(result);
        let listings = [];
        await Promise.all(result.map(async (ele) => {
            const list = await ListingModel.findOne({ _id: ele.Listing_id });
            const new_obj = {
                list,
                Done: ele.Done,
                Tour_id: ele._id
            }
            listings.push(new_obj);
        }));
        // Using await and Promise.all() on the outer side of result.map() ensures that the promises
        //  generated by ListingModel.findOne() are properly awaited and resolved before moving on to the
        //  next iteration, and that the listings array is correctly populated with all the objects from 
        // the result array with the correct data from ListingModel.findOne().
        //  It also ensures that the response is sent to the client only when all promises have resolved,
        //   preventing any premature response being sent.

        res.status(200).send(listings);
    } catch (err) {
        res.status(500).json({ message: err.message, iserror: 2 })
    }
}
const AddAgentTour = async (req, res) => {
    try {
        const { _id, Agent_uid } = req.body
        const result = await TourModel.findByIdandUpdate({ _id: _id }, { Agent_uid: Agent_uid }, { new: true })
        res.status(200).json({ message: "Agent Added successfully", iserror: 1 })

    } catch (Err) {
        res.status(500).json({ message: "Internal Server Error", iserror: 3 })
    }
}
const GetAllTour = async (req, res) => {
    try {
        const result = await TourModel.find();
        console.log(result,"RESULT CALLED")
        res.status(200).send(result);
    } catch (Err) {
        res.status(500).json({ message: "Internal Server Error", iserror: 3 })
    }
}
const DeleteTourid = async (req, res) => {
    try {
        const { _id, uid } = req.body
        const result = await TourModel.findByIdAndDelete(_id);
        // console.log(result)
        // console.log(req.body);
        const new_result = await TourModel.find({ User_uid: uid });
        if (new_result.length === 0) {
            throw new ERROR("No Tour Sechduled")
        }
        // console.log(result);
        let listings = [];
        await Promise.all(new_result.map(async (ele) => {
            const list = await ListingModel.findOne({ _id: ele.Listing_id });
            const new_obj = {
                list,
                Done: ele.Done,
                Tour_id: ele._id
            }
            listings.push(new_obj);
        }));
        // Using await and Promise.all() on the outer side of result.map() ensures that the promises
        //  generated by ListingModel.findOne() are properly awaited and resolved before moving on to the
        //  next iteration, and that the listings array is correctly populated with all the objects from 
        // the result array with the correct data from ListingModel.findOne().
        //  It also ensures that the response is sent to the client only when all promises have resolved,
        //   preventing any premature response being sent.

        // res.status(200).send(listings);
        res.status(200).send({ message: "Successfully Cancelled", iserror: 1, listings })
    } catch (err) {
        res.status(500).send({ message: "Internal Server Error Occured", iserror: 3 })
    }
}
const CancelTour=async(req,res)=>{
    try{
        const {_id}=req.body;
        console.log(req.body)
        const result=await TourModel.findByIdAndUpdate(_id,{isCancel:true},{new:true});
        console.log(result);
        res.status(200).send({message:"Cancelled Sucessfully", iserror:1})
    }catch(err){
        res.status(500).send({message:"Internal Server Error Occured", iserror:3});
    }
}


module.exports = { ScheduleTour, GetToursUser, AddAgentTour, GetAllTour, DeleteTourid ,CancelTour}